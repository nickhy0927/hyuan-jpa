<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">
    <!-- 打印调试信息，仅在开发环境中使用 -->
    <!--<security:debug/>-->

    <!-- 不需要被拦截的请求 -->
    <security:http pattern="/static/**" security="none"/>
    <security:http pattern="/assets/**" security="none"/>
    <security:http pattern="/druid/**" security="none"/>
    <security:http pattern="/auth/authCode.image" security="none"/>
    <security:http pattern="/login.jsp" security="none"/>
    <security:http pattern="/user/login.json" security="none"/>

    <bean id="csrfSecurityRequestMatcher" class="com.iss.request.CsrfSecurityRequestMatcher"/>
    <bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl"/>

    <!--配置web端使用权限控制-->
    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler"/>
    <security:http use-expressions="true" auto-config="true">
        <security:form-login
                login-page="/login.jsp"
                default-target-url="/index.do"
                authentication-failure-url="/login.jsp?error=1"
                password-parameter="password"
                username-parameter="username"
                always-use-default-target="true"/>
        <!-- <security:custom-filter ref="usernamePasswordAuthentication" before="FORM_LOGIN_FILTER"/> -->
        <!-- <security:custom-filter ref="filterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR" /> -->
        <security:intercept-url pattern="/**" access="ROLE_ANONYMOUS"/>
        <!-- <security:csrf request-matcher-ref="csrfSecurityRequestMatcher"/> -->
        <security:csrf disabled="true"/>
        <security:logout delete-cookies="JSESSIONID" invalidate-session="true"/>
        <security:expression-handler ref="webexpressionHandler"/>
        <security:session-management invalid-session-url="/login.jsp">
            <!--
                max-sessions只容许一个账号登录，
                error-if-maximum-exceeded 后面账号登录后踢出前一个账号，
                expired-url session过期跳转界面
            -->
            <security:concurrency-control
                    max-sessions="1"
                    error-if-maximum-exceeded="true"
                    expired-url="/login.jsp"
                    session-registry-ref="sessionRegistry"/>
        </security:session-management>
        <security:headers>
            <security:frame-options disabled="true"/>
        </security:headers>
    </security:http>
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider ref="authenticationProvider"/>
    </security:authentication-manager>
    <!-- <bean id="usernamePasswordAuthentication" class="com.iss.oauth.password.UsernamePasswordAuthentication">
        <property name="authenticationManager" ref="authenticationManager"/>
    </bean> -->

    <!-- Md5加密 -->
    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>

    <bean id="authenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
        <property name="hideUserNotFoundExceptions" value="true"/>
        <property name="userDetailsService" ref="userDetailsService"/>
        <property name="passwordEncoder" ref="passwordEncoder"/>
        <property name="saltSource" ref="saltSource"/>
    </bean>
    <bean id="userDetailsService" class="com.iss.oauth.user.UserDetailsServiceImpl"/>

    <!-- 盐值加密 salt对应数据库字段-->
    <bean id="saltSource" class="org.springframework.security.authentication.dao.ReflectionSaltSource">
        <property name="userPropertyToUse" value="salt" />
    </bean>
    
   <!--访问决定管理器 用于决定是否对请求进行拒绝或者允许通行 -->
    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <ref bean="roleVoter"/>
                <ref bean="authenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>
    <!--角色投票器 -->
    <bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter">
        <property name="rolePrefix" value=""/>
    </bean>
    <!--鉴权投票器 -->
    <bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter" />
    
    <!-- <bean id="securityMetadataSource" class="com.iss.oauth.user.UrlFilterInvocationSecurityMetadataSource" />
	<bean id="filterSecurityInterceptor" class="com.iss.oauth.user.UrlFilterSecurityInterceptor">
	  	<property name="authenticationManager" ref="authenticationManager"/>
	  	<property name="accessDecisionManager" ref="accessDecisionManager"/>
	  	<property name="securityMetadataSource" ref="securityMetadataSource" />
	</bean>
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
  		<constructor-arg>
		    <list>
		      	<bean id="authenticatedVoter" class="org.springframework.security.access.vote.AuthenticatedVoter" />
		      	<bean id="roleVoter" class="org.springframework.security.access.vote.RoleVoter" />
		      	<bean id="urlMatchVoter" class="com.iss.oauth.user.UrlMatchVoter" />
	    	</list>
  		</constructor-arg>
	</bean> -->
</beans>
