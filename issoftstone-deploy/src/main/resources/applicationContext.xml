<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	default-lazy-init="true"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
	<description>Spring公共配置</description>
	<bean id="springContextHolder" class="com.iss.common.spring.SpringContextHolder" lazy-init="false" />
	<import resource="applicationContext-aop.xml"/>
	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:component-scan base-package="com.iss.platform,com.iss.oauth,com.iss.news,com.iss.job,com.iss.blog">
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<jpa:repositories base-package="com.iss.platform,com.iss.oauth,com.iss.news,com.iss.job,com.iss.blog"
		transaction-manager-ref="transactionManager"
		entity-manager-factory-ref="entityManagerFactory"
		factory-class="com.iss.orm.factory.DefaultRepositoryFactoryBean">
	</jpa:repositories>

	<!-- JPA实体管理工厂的配置 -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter" />
		<property name="packagesToScan" value="com.iss.platform,com.iss.oauth,com.iss.news,com.iss.job,com.iss.blog" />
		<!--待扫描的实体类包，不再需要persistence.xml了 -->
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="net.sf.ehcache.configurationResourceName">ehcache/ehcache-hibernate-local.xml</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
			</props>
		</property>
	</bean>

	<!--指定实现JPA的适配器 -->
	<bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<property name="databasePlatform" value="${jdbc.sql.dialect}" />
	</bean>

	<!-- Jpa 事务配置 -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />

	<!-- 将多个配置文件位置放到列表中 -->
	<bean id="propertyResources" class="java.util.ArrayList">
		<constructor-arg>
			<list>
				<!-- 这里支持多种寻址方式：classpath和file -->
				<value>classpath*:/application.development.properties</value>
				<value>classpath*:/InitEnvironment.properties</value>
				<value>classpath*:/config/job/xxl-job-executor.properties</value>
			</list>
		</constructor-arg>
	</bean>

	<!-- 将配置文件读取到容器中，交给Spring管理 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" ref="propertyResources" />
	</bean>

	<bean id="initEnvironment" class="com.iss.common.config.InitEnvironment" lazy-init="false">
		<property name="errorPage" value="${errorPage}" />
		<property name="initPassword" value="${initPassword}" />
		<property name="initUsername" value="${initUsername}" />
	</bean>
	
	<bean class="com.iss.interceptor.StaticResources" init-method="init" lazy-init="false">
		<property name="loginUrl" value="redirect:/login.do" />
		<property name="successUrl" value="/index.do" />
		<property name="unauthUrl" value="/unauth.jsp"/>
		<property name="urls">
			<list>
				<value>/static/**</value>
				<value>/assets/**</value>
				<value>/login.jsp</value>
				<value>/login/**</value>
			</list>
		</property>
	</bean>
	
	<!-- development 环境 -->
	<bean id="dataSourceSpied" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="20" />
		<property name="minIdle" value="1" />
		<property name="maxActive" value="40" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
  	</bean>
  	<bean id="dataSource" class="com.iss.oauth.init.DynamicDataSource">
  		<property name="masterDataSource" ref="defaultDataSource" />
  		<property name="querySql" value="select * from t_p_s_database where status = 0 and enable = 1" />
  		<property name="targetDataSources">
  			<map>
  				<entry key="dataSource" value-ref="defaultDataSource" />
  			</map>
  		</property>
  	</bean>
	<bean id="defaultDataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied" />
	</bean>
	
	<import resource="config/security/spring-security.xml"/>
	<import resource="config/log/tomcat-log.xml"/>
	<!-- <import resource="config/job/applicationcontext-xxl-job.xml"/> -->
</beans>